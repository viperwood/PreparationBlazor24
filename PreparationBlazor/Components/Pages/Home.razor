@page "/Registration"
@using Newtonsoft.Json
@using PreparationBlazor.Components.Models
@rendermode InteractiveServer


<PageTitle>Registration</PageTitle>




<div style="display: grid; grid-template-rows: 20vh 1fr 20vh; grid-template-columns: 1fr 1fr 1fr; background: linear-gradient(to top, blue, rebeccapurple)">
    <div style="grid-row: 1; grid-column: 2; display: flex; text-align: center; vertical-align: center">
        <h3 style="color: white; margin: auto">Регистрация</h3>
    </div>
    <div style="grid-column: 2; grid-row: 2; display: block; background: white; border-radius: 100px;">
        <b class="textInput">ФИО:</b>
        <input placeholder="ФИО:" @bind="_registrationModel.Fio" class="input">
        <b class="textInput">Серия паспорта:</b>
        <input placeholder="Серия паспорта:" @bind="_registrationModel.Serialp" class="input">
        <b class="textInput">Номер паспорта:</b>
        <input placeholder="Номер паспорта:" @bind="_registrationModel.Numberp" class="input">
        <b class="textInput">Номер полиса:</b>
        <input placeholder="Номер полиса:" @bind="_registrationModel.Numberpolis" class="input">
        <b class="textInput">День рождения</b>
        <InputDate Type="InputDateType.Date" @bind-Value="@_registrationModel.Birthday" class="input"/>
        <b class="textInput">Дата окончания действия страхового полиса пациента</b>
        <InputDate Type="InputDateType.Date" @bind-Value="@_registrationModel.Dataexpirationinsurancepolisy" class="input"/>
        <b class="textInput">Срок действия медецинского полиса</b>
        <InputDate Type="InputDateType.Date" @bind-Value="@_registrationModel.Policyvalidity" class="input"/>
        <b class="textInput">Дата выдачи медицинской карты пациента</b>
        <InputDate Type="InputDateType.Date" @bind-Value="@_registrationModel.Dataissuemc" class="input"/>
        <b class="textInput">Адрес:</b>
        <input placeholder="Адрес:" @bind="_registrationModel.Address" class="input">
        <b class="textInput">Телефон:</b>
        <input placeholder="Телефон:" @bind="_registrationModel.Phone" class="input">
        <b class="textInput">email:</b>
        <input type="email" placeholder="E-mail:" @bind="_registrationModel.Email" class="input">
        <b class="textInput">Пол:</b>
        <select class="select-element input" @bind="@_registrationModel.Genders">
            <option value="" selected disabled hidden>Выбор гендера</option>
            @foreach (var element in _genders)
            {
                <option>@element.Gendername</option>
            }
        </select>
        <b class="textInput">Место работы:</b>
        <select class="select-element inputBox" @bind="@_registrationModel.Placeofworksid">
            <option value="" selected disabled hidden>Выбор места работы</option>
            @foreach (var elem in _placeofworknames)
            {
                <option>@elem.Placeofworkname</option>
            }
        </select>
        <b class="textInput">Страховая компания:</b>
        <select class="select-element inputBox" @bind="@_registrationModel.Insurancecompanysid">
            <option value="" selected disabled hidden>Выбор страховой компании</option>
            @foreach (var elements in _insurancecompanynames)
            {
                <option>@elements.Insurancecompanyname</option>
            }
        </select>
        <button type="submit" @onclick="GetReg" class="inputBox">
            Зарегестрировать
        </button>
        <b>@_a</b>
    </div>
</div>
@code
{
    RegistrationModel _registrationModel = new();
    private string? _a;
    private string _urLpath = "http://localhost:5263/api/";
    private List<GenderList> _genders = new();
    private List<PlaceofworknameList> _placeofworknames = new();
    private List<InsurancecompanynameList> _insurancecompanynames = new();
    
    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage responseMessage = await ClientHttpClass.Client.GetAsync($"{_urLpath}Gender/GetGender");
        string elementGender = await responseMessage.Content.ReadAsStringAsync();
        _genders = JsonConvert.DeserializeObject<List<GenderList>>(elementGender)!.ToList();

        HttpResponseMessage resppons = await ClientHttpClass.Client.GetAsync($"{_urLpath}PlaceWork/GetPlaceWork");
        string elementPlaceWork = await resppons.Content.ReadAsStringAsync();
        _placeofworknames = JsonConvert.DeserializeObject<List<PlaceofworknameList>>(elementPlaceWork)!.ToList();
        
        HttpResponseMessage resp = await ClientHttpClass.Client.GetAsync($"{_urLpath}InsuranceCompany/GetInsuranceCompany");
        string elementInsurance = await resp.Content.ReadAsStringAsync();
        _insurancecompanynames = JsonConvert.DeserializeObject<List<InsurancecompanynameList>>(elementInsurance)!.ToList();
    }
    
    private async void GetReg()
    {
        HttpResponseMessage responseMessage = await ClientHttpClass.Client.PostAsJsonAsync($"{_urLpath}Registration/PostReg", _registrationModel);
        _a = responseMessage.IsSuccessStatusCode.ToString();
    }
    
    
    
    
    private class GenderList
    {
        public GenderList(string? gendername)
        {
            Gendername = gendername;
        }

        public string? Gendername { get; set; }
    }
    private class PlaceofworknameList
    {
        public PlaceofworknameList(string? placeofworkname)
        {
            Placeofworkname = placeofworkname;
        }

        public string? Placeofworkname { get; set; }
    }
    private class InsurancecompanynameList
    {
        public InsurancecompanynameList(string? insurancecompanyname)
        {
            Insurancecompanyname = insurancecompanyname;
        }

        public string? Insurancecompanyname { get; set; }
    }
    
    
}
